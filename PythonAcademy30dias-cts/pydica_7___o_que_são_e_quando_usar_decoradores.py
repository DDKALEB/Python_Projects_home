# -*- coding: utf-8 -*-
"""PyDica #7 | O que s√£o e quando usar Decoradores.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IxrpFqph2j15vbS0rJg-rCo_wdLOcbFz

# PyDica #7 | O que s√£o e quando usar Decoradores...

Voc√™ j√° se deparou com aqueles @ misteriosos em um c√≥digo Python e ficou se perguntando o que eram? O que eles fazem? Onde dormem? Do que se alimentam?!



Calma jovem Pythonista! A Python Academy desvenda esse mist√©rio pra voc√™ üòâ



Esses s√£o os Decoradores em a√ß√£o!



Eles s√£o uma forma estilosa e poderosa de adicionar ou modificar funcionalidades em fun√ß√µes ou m√©todos, sem ter que mexer no c√≥digo original!



Vamos come√ßar com um exemplo simples:
"""

def meu_decorador(funcao):
  def wrapper():
    print("Algo acontecendo antes da fun√ß√£o.")
    funcao()
    print("Algo acontecendo depois da fun√ß√£o.")
  return wrapper

@meu_decorador
def diga_ola():
    print("Ol√°!")

diga_ola()

"""Quando chamamos diga_ola(), estamos, na verdade, chamando wrapper(), gra√ßas √† magia do @meu_decorador!



Mas n√£o paramos por aqui!



Imagine que voc√™ queira um decorador que me√ßa o tempo de execu√ß√£o de uma fun√ß√£o:
"""



import time

def temporizador(funcao):
    def wrapper(*args, **kwargs):
      inicio = time.perf_counter()
      resultado = funcao(*args, **kwargs)
      fim = time.perf_counter()
      print(f"Tempo: {fim - inicio:.2f}s")
      return resultado
    return wrapper

@temporizador
def demora(segundos):
  time.sleep(segundos)

demora(2)

"""Ao executar esse c√≥digo, veremos o tempo de execu√ß√£o do c√≥digo!
E tem mais!

E se quis√©ssemos um decorador que fizesse log de quando uma fun√ß√£o √© chamada?
"""

def logger(funcao):
    def wrapper(*args, **kwargs):
        print("Logger:")
        print(f"\tArgs: {args}")
        print(f"\tKwargs: {kwargs}")
        return funcao(*args, **kwargs)
    return wrapper

@logger
def saudacao(nome, idade=None):
    return f"Ol√° {nome}! Voc√™ tem {idade} anos."

saudacao("Ana", idade=30)

"""Obter√≠amos a seguinte sa√≠da, logando todos os par√¢metros da chamada da fun√ß√£o, olha que incr√≠vel!

Da√≠ nasceu o decorator, que nada mais √© que um m√©todo para envolver uma fun√ß√£o, modificando seu comportamento.

Para explicar melhor, veja o c√≥digo abaixo:
"""

def decorator(funcao):
    def wrapper():
        print ("Estou antes da execu√ß√£o da fun√ß√£o passada como argumento")
        funcao()
        print ("Estou depois da execu√ß√£o da fun√ß√£o passada como argumento")

    return wrapper

def outra_funcao():
    print ("Sou um belo argumento!")

funcao_decorada = decorator(outra_funcao)
funcao_decorada()

"""Dessa forma, conseguimos adicionar qualquer comportamento antes e depois da execu√ß√£o de uma fun√ß√£o qualquer!

Vamos fazer agora um exemplo mais √∫til, algo que todo mundo que desenvolve software teve que fazer alguma vez vida: calcular o tempo de execu√ß√£o de determinada fun√ß√£o!

"""

import time

# Define nosso decorator
def calcula_duracao(funcao):
    def wrapper():
        # Calcula o tempo de execu√ß√£o
        tempo_inicial = time.time()
        funcao()
        tempo_final = time.time()

        # Formata a mensagem que ser√° mostrada na tela
        print("[{funcao}] Tempo total de execu√ß√£o: {tempo_total}".format(
            funcao=funcao.__name__,
            tempo_total=str(tempo_final - tempo_inicial))
        )

    return wrapper

# Decora a fun√ß√£o com o decorator
@calcula_duracao
def main():
    for n in range(0, 10000000):
        pass

# Executa a fun√ß√£o main
main()

"""Nossa fun√ß√£o principal tem apenas um loop que n√£o faz nada, apenas itera n de 0 √† 10000000, o que dura um certo tempo.

Marcamos o tempo de in√≠cio e de t√©rmino da execu√ß√£o com o m√≥dulo time e ent√£o subtra√≠mos o final pelo inicial, dando o tempo total de execu√ß√µes.

A sa√≠da ser√° (o tempo de execu√ß√£o depende da sua m√°quina):
"""

# Vamos ver agora um exemplo real de utiliza√ß√£o de Decorators!

"""Exemplo Real: Restringindo o Acesso em uma Aplica√ß√£o Flask
Para quem n√£o conhece, Flask √© um framework web minimalista, muito simples de utilizar e bem divertido!

Est√° curtindo esse conte√∫do?

Bom, quando desenvolvemos sistemas para web, n√≥s sempre nos preocupamos com o controle de acesso a determinadas p√°ginas.

Por exemplo, n√£o queremos que usu√°rios n√£o autorizados acessem a URL /admin/. Para isso, uma abordagem seria incluir a verifica√ß√£o de usu√°rios no corpo de toda fun√ß√£o que trata requisi√ß√µes.
Exemplo (utilizando Flask):
"""

pip install flask==2.0.2

from flask import render_template

@app.route('/exemplo')
def exemplo:
    return render_template('exemplo.html')

from flask_foo import Foo

foo = Foo()

app = Flask(__name__)
app.config.update(
    FOO_BAR='baz',
    FOO_SPAM='eggs',
)

foo.init_app(app)

@app.route('/admin')
def admin_index():
    # Verifica se session['logado'] j√° foi setado
    if ('logado' not in session):
        return redirect('index')

    # Caso usu√°rio esteja logado, renderiza a p√°gina /admin/index.html
    return render_template('/admin/index.html')

"""O problema dessa abordagem √© que teremos que repetir a opera√ß√£o de verificar se o usu√°rio est√° logado em toda requisi√ß√£o para /admin/*.

Isso gera c√≥digo duplicado em todas essas fun√ß√µes. Sem contar que qualquer erro no ‚Äúcopia e cola‚Äù desse c√≥digo pode estar expondo uma URL para qualquer usu√°rio. Teeeenso! :hushed:

Para evitar esse tipo de problema, podemos criar um decorator que verifica se o usu√°rio que est√° requisitando aquela p√°gina j√° efetuou o login ou n√£o da seguinte forma:
"""

# Decorator
def requer_autenticacao(f):
    @wraps(f)
    def funcao_decorada(*args, **kwargs):
        # Verifica session['logado']
        if ('logado' not in session):
            # Retorna para a URL de login caso o usu√°rio n√£o esteja logado
            return redirect(url_for('index'))

        return f(*args, **kwargs)
    return funcao_decorada

"""Para utilizar esse decorator, precisamos apenas inclu√≠-lo nas fun√ß√µes que queremos restringir o acesso. Exemplo:"""

# Olha quem t√° aqui... Outro decorator :D
@app.route('/admin/dashboard')
@requer_autenticacao
def admin_dashboard():
    # Renderiza o template dashboard.html
    return render_template('admin/dashboard.html')